name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"
      - name: Update npm
        run: npm install -g npm@latest

      - name: Frontend - Debug package.json
        run: cat frontend/react-app/package.json

      - name: Frontend - Clear npm cache
        run: npm cache clean --force
        working-directory: ./frontend/react-app

      - name: Frontend - Install dependencies
        run: npm ci
        working-directory: ./frontend/react-app

      - name: Frontend - Run tests
        run: npm test -- --passWithNoTests
        working-directory: ./frontend/react-app

      - name: Frontend - Build
        run: npm run build
        working-directory: ./frontend/react-app

      - name: Upload frontend build artifact
        uses: actions/upload-artifact@v2
        with:
          name: react-build
          path: frontend/react-app/build

      - name: Backend - Debug package.json
        run: cat backend/graphql-server/package.json

      - name: Backend - Clear npm cache
        run: npm cache clean --force
        working-directory: ./backend/graphql-server

      - name: Backend - Install dependencies
        run: npm ci
        working-directory: ./backend/graphql-server

      - name: Backend - Run tests
        run: |
          if npm run test 2>&1 | grep -q "Missing script: \"test\""; then
            echo "No test script found. Skipping tests."
            exit 0
          else
            npm run test
          fi
        working-directory: ./backend/graphql-server

      - name: Configure AWS credentials
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push GraphQL server image to Amazon ECR
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: graphql
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./backend/graphql-server
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Deploy Backend with Serverless Framework
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          npm install -g serverless
          npm install
          serverless deploy --stage prod
        working-directory: ./backend/graphql-server

      - name: Update S3 bucket policy
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          aws s3api put-bucket-policy --bucket frontend-s3-react --policy '{
            "Version": "2012-10-17",
            "Statement": [
              {
                "Sid": "PublicReadGetObject",
                "Effect": "Allow",
                "Principal": "*",
                "Action": "s3:GetObject",
                "Resource": "arn:aws:s3:::frontend-s3-react/*"
              }
            ]
          }'

      - name: Deploy Frontend to S3
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          aws s3 sync frontend/react-app/build/ s3://frontend-s3-react --delete

      - name: Update ECS service
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          aws ecs update-service --cluster your-cluster-name --service your-service-name --force-new-deployment
