name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  frontend-build-and-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend/react-app

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "14"
      - name: Install dependencies
        run: npm ci
      - name: Run tests
        run: npm test
      - name: Build
        run: npm run build
      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: react-build
          path: frontend/react-app/build

  backend-build-and-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend/graphql-server

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "14"
      - name: Install dependencies
        run: npm ci
      - name: Run tests
        run: npm test

  deploy:
    needs: [frontend-build-and-test, backend-build-and-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push GraphQL server image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: graphql-server
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./backend/graphql-server
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Deploy Backend with Serverless Framework
        run: |
          npm install -g serverless
          npm install
          serverless deploy --stage prod

      - name: Download React build artifact
        uses: actions/download-artifact@v2
        with:
          name: react-build
          path: react-build

      - name: Update S3 bucket policy
        run: |
          aws s3api put-bucket-policy --bucket frontend-s3-react --policy '{
            "Version": "2012-10-17",
            "Statement": [
              {
                "Sid": "PublicReadGetObject",
                "Effect": "Allow",
                "Principal": "*",
                "Action": "s3:GetObject",
                "Resource": "arn:aws:s3:::frontend-s3-react/*"
              }
            ]
          }'

      - name: Deploy Frontend to S3
        run: |
          aws s3 sync react-build/ s3://frontend-s3-react --delete

      - name: Update ECS service
        run: |
          aws ecs update-service --cluster your-cluster-name --service your-service-name --force-new-deployment
