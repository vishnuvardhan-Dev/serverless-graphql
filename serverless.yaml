service: graphql-serverless-architecture

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

plugins:
  - serverless-dotenv-plugin

custom:
  ecsCluster: graphql-cluster
  ecsService: graphql-service
  ecrRepository: 339712726852.dkr.ecr.us-east-1.amazonaws.com/graphql:latest
  vpcId: vpc-022b1b302db9ca7cc
package:
  individually: true
  exclude:
    - node_modules/**
    - venv/**
    - .git/**
    - .vscode/**
    - test/**
    - README.md
    - package-lock.json
    - yarn.lock
    - frontend/**

functions:
  graphqlHandler:
    handler: backend/lambda-functions/graphqlHandler.handler
    events:
      - http:
          path: graphql
          method: post
          cors: true
    role: LambdaExecutionRole

resources:
  Resources:
    LambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          - arn:aws:iam::aws:policy/AmazonECS_FullAccess
          - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess
        Policies:
          - PolicyName: SecretsManagerAccess
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - secretsmanager:GetSecretValue
                  Resource: "arn:aws:secretsmanager:${self:provider.region}:339712726852:secret:${self:service}/${self:provider.stage}/*"

    ECSCluster:
      Type: AWS::ECS::Cluster
      Properties:
        ClusterName: ${self:custom.ecsCluster}

    # ECRRepository:
    #   Type: AWS::ECR::Repository
    #   Properties:
    #     RepositoryName: ${self:custom.ecrRepository}
    ALB:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Scheme: internet-facing
        SecurityGroups: 
          - !Ref ALBSecurityGroup
        Subnets: 
          - subnet-0016e3d8dbb757c4b # Add more subnets as needed
        # Make sure these subnets are in the VPC you specified

    ALBSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for ALB
        VpcId: ${self:custom.vpcId}
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0    

    ALBListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
          - Type: forward
            TargetGroupArn: !Ref ALBTargetGroup
        LoadBalancerArn: !Ref ALB
        Port: 80
        Protocol: HTTP

    ALBTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        HealthCheckPath: /health # Ensure your GraphQL server has a health check endpoint
        Name: GraphQLTargetGroup
        Port: 4000
        Protocol: HTTP
        TargetType: ip
        VpcId: ${self:custom.vpcId} # Replace with your VPC ID

    ALBSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for ALB
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
    ECSTaskDefinition:
      Type: AWS::ECS::TaskDefinition
      Properties:
        Family: graphql-server-task
        Cpu: "256"
        Memory: "512"
        NetworkMode: awsvpc
        RequiresCompatibilities:
          - FARGATE
        ContainerDefinitions:
          - Name: graphql-server
            Image: ${self:custom.ecrRepository}
            PortMappings:
              - ContainerPort: 4000
        ExecutionRoleArn: !Ref ECSTaskExecutionRole

    ECSTaskExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: ecs-tasks.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

    ECSService:
      Type: AWS::ECS::Service
      Properties:
        ServiceName: ${self:custom.ecsService}
        Cluster:
          Ref: ECSCluster
        TaskDefinition:
          Ref: ECSTaskDefinition
        DesiredCount: 1
        LaunchType: FARGATE
        NetworkConfiguration:
          AwsvpcConfiguration:
            AssignPublicIp: ENABLED
            Subnets:
              - subnet-0016e3d8dbb757c4b
            SecurityGroups:
                  - !Ref ECSSecurityGroup
    ECSSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for ECS tasks
        VpcId: ${self:custom.vpcId}
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 4000
            ToPort: 4000
            SourceSecurityGroupId: !Ref ALBSecurityGroup                  
    CloudWatchLogsGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/lambda/${self:service}-${self:provider.stage}
        RetentionInDays: 7

    CloudWatchAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-${self:provider.stage}-errors
        AlarmDescription: "Alert when errors occur"
        MetricName: Errors
        Namespace: AWS/Lambda
        Statistic: Sum
        Period: 60
        EvaluationPeriods: 1
        Threshold: 1
        ComparisonOperator: GreaterThanOrEqualToThreshold
        AlarmActions:
          - arn:aws:sns:us-east-1:339712726852:alert # Replace with your SNS topic ARN

    SecretsManager:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: ${self:service}/${self:provider.stage}/secrets
        Description: "Secrets for the GraphQL serverless architecture"

    AutoScalingTarget:
      Type: AWS::ApplicationAutoScaling::ScalableTarget
      Properties:
        MaxCapacity: 10
        MinCapacity: 1
        ResourceId: !Join
          - "/"
          - - service
            - ${self:custom.ecsCluster}
            - ${self:custom.ecsService}
        ScalableDimension: ecs:service:DesiredCount
        ServiceNamespace: ecs
      DependsOn: ECSService

    AutoScalingPolicy:
      Type: AWS::ApplicationAutoScaling::ScalingPolicy
      Properties:
        PolicyName: ${self:service}-${self:provider.stage}-auto-scaling
        PolicyType: TargetTrackingScaling
        ScalingTargetId: !Ref AutoScalingTarget
        TargetTrackingScalingPolicyConfiguration:
          PredefinedMetricSpecification:
            PredefinedMetricType: ECSServiceAverageCPUUtilization
          TargetValue: 70
      DependsOn: AutoScalingTarget
    ReactAppBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: frontend-s3-react-${self:provider.stage}
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
        OwnershipControls:
          Rules:
            - ObjectOwnership: BucketOwnerPreferred
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false

    ReactAppBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref ReactAppBucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
                - s3:GetObject
              Resource: !Join
                - ""
                - - "arn:aws:s3:::"
                  - !Ref ReactAppBucket
                  - "/*"

outputs:
  ReactAppBucketName:
    Value: !Ref ReactAppBucket
    Export:
      Name: ${self:service}-${self:provider.stage}-react-app-bucket

  ReactAppBucketWebsiteURL:
    Value: !GetAtt ReactAppBucket.WebsiteURL
    Export:
      Name: ${self:service}-${self:provider.stage}-react-app-url
